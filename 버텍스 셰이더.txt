버텍스 셰이더
픽셀 셰이더
알파 블랜딩
z-buffer
g-buffer
simd
T&L
디퍼드 랜더링
포워드 랜더링
언리얼5로 넘어갈때 루멘?
언리얼3으로 넘어갈떄 G-buffer?(디퍼드 랜더링)

나이아가라를 찾아봐야함


오늘 강의를 정리해보면

1. 랜더링 파이프라인
버텍스 셰이더 -> 위치 같은 걸 계산
픽셸 셰이더 -> 텍스쳐, 컬러, 라이팅 같은 걸 계산

버텍스 셰이더가 phase 1이면 픽셸 셰이더가 phase 2

예전에는 하드웨어에서 지원을 안해줘서 소프트웨어에서 버텍스 계산을 했는데
그래픽카드에서 T&L 지원이 되도록 바뀜

하드웨어에서 지원이 되면서 simd가 가능 (single instruction multi data)

Geforce 4천번대부터 프로그래머들이 픽셀 셰이더를 조작 가능하도록 변경?

z-buffer 개념이 도입되면서 뒤부터가 아니라 앞부터 랜더링 가능
플스1 시절에는 z-buffer가 없어서 무조건 뒤에서 부터 그림
그러면 뫼비우스의 띠 같은 형태를 표현할 수 없었음
z-buffer로 깊이 값을 저장해서 가려지면 안그리고 계산 자체를 뛰어넘을 수 있음

근데 투명한 애들은 알파 블랜딩 개념이 필요
랜더링할 타겟의 알파값과 배경의 알파값 모두 계산 필요
앞뒤를 뒤집었을 때의 계산값이 다르게 나올 수 있음 

스태틱한 데이터는 이런식으로 처리해서 연산량 줄임

캐릭터 애니메이션의 경우
원래는 모든 포즈에 대해 버텍스 계산하고 픽셀 계산해야했는데
버텍스에 본에 대한 가중치를 매겨서 계산하도록 변경


DrawPrimitive Call을 줄이는 게 중요


g-buffer가 들어오면서 디퍼드 랜더링 가능해짐
그리고 MRT(multi-render-targets) 때문에 가능해짐
라이팅 개수가 늘어나면서 버텍스+픽셀 셰이더 연산을 반복해서 해야했는데
버텍스 연산은 한번만 해두면 되는데 불필요한 연산이 많아짐
g-buffer에 라이팅에 필요한 정보를 여러 Render Target으로 세팅 후 저장


LOD에서 원래는 해상도에 따라 모델 따로 만듦
그걸 트리구조로 버텍스 정보를 저장, 하위로 갈수록 상세한 정보?
이걸 자동으로 쪼개주는게 루멘?


